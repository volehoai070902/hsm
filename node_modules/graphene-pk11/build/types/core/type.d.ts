/**
 * Returns `true` if incoming data is string, otherwise `false`
 * @param v Tested value
 */
export declare function isString(v: any): v is string;
/**
 * Returns `true` if incoming data is number, otherwise `false`
 * @param v Tested value
 */
export declare function isNumber(v: any): v is number;
/**
 * Returns `true` if incoming data is boolean, otherwise `false`
 * @param v Tested value
 */
export declare function isBoolean(v: any): v is boolean;
/**
 * Returns `true` if incoming data is undefined, otherwise `false`
 * @param v Tested value
 */
export declare function isUndefined(v: any): v is undefined;
/**
 * Returns `true` if incoming data is null, otherwise `false`
 * @param v Tested value
 */
export declare function isNull(v: any): v is null;
/**
 * Returns `true` if incoming data is empty (undefined or null), otherwise `false`
 * @param v Tested value
 */
export declare function isEmpty(v: any): v is null | undefined;
/**
 * Returns `true` if incoming data is Function, otherwise `false`
 * @param v Tested value
 */
export declare function isFunction(v: any): v is (...args: any[]) => any;
/**
 * Returns `true` if incoming data is Object, otherwise `false`
 * @param v Tested value
 */
export declare function isObject(v: any): v is object;
/**
 * Returns `true` if incoming data is Array, otherwise `false`
 * @param v Tested value
 */
export declare function isArray(v: any): v is any[];
/**
 * Returns `true` if bit is enabled in flag value, otherwise `false`
 * @param v Flag
 * @param fv Bit value
 */
export declare function isFlag(v: number, fv: number): boolean;
/**
 * Removes padded ends from the string
 * @param text Formatted string
 */
export declare function removePadding(text: string): string;
