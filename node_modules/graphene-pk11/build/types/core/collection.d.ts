import * as pkcs11 from "pkcs11js";
import * as object from "./object";
/**
 * Abstract class which represents a collection of items
 */
export declare abstract class Collection<T extends object.HandleObject> extends object.BaseObject implements Iterable<T> {
    /**
     * List of inner items
     */
    protected innerItems: any[];
    /**
     * Type for child item initialization
     */
    protected classType: object.HandleObjectConstructor<T>;
    /**
     * Initialize a new instance of collection
     * @param items List of IDs
     * @param lib PKCS#11 module
     * @param classType Type for a child item initialization
     */
    constructor(items: any[], lib: pkcs11.PKCS11, classType: any);
    /**
     * Returns length of collection
     */
    get length(): number;
    /**
     * Returns item from collection by index
     * @param index Index of element in the collection `[0..n]`
     * @returns Child item
     */
    items(index: number): T;
    /**
     * Returns the index of the first occurrence of a value in an array.
     * @param obj       The value to locate in the array.
     * @param fromIndex The array index at which to begin the search.
     * @remarks If `fromIndex` is omitted, the search starts at index 0.
     */
    indexOf(obj: T, fromIndex?: number): number;
    /**
     * A method that returns the default iterator for an object. Called by the semantics of the
     * for-of statement.
     */
    [Symbol.iterator](): {
        next(): IteratorResult<T>;
    };
}
