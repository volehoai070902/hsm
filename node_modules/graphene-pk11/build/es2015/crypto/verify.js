import * as pkcs11 from "pkcs11js";
import * as core from "../core";
import { Mechanism } from "../mech";
export class Verify extends core.BaseObject {
    constructor(session, alg, key, lib) {
        super(lib);
        this.session = session;
        this.init(alg, key);
    }
    update(data) {
        try {
            const bytes = Buffer.from(data);
            this.lib.C_VerifyUpdate(this.session.handle, bytes);
        }
        catch (e) {
            try {
                this.final(Buffer.alloc(0));
            }
            catch (e) {
            }
            throw e;
        }
    }
    final(signature) {
        let res = false;
        try {
            res = this.lib.C_VerifyFinal(this.session.handle, signature);
        }
        catch (err) {
            if (!(err instanceof pkcs11.Pkcs11Error && err.code === pkcs11.CKR_SIGNATURE_INVALID)) {
                throw err;
            }
        }
        return res;
    }
    once(data, signature, cb) {
        const bytes = Buffer.from(data);
        if (cb) {
            this.lib.C_Verify(this.session.handle, bytes, signature, (err, data2) => {
                if (err instanceof pkcs11.Pkcs11Error && err.code === pkcs11.CKR_SIGNATURE_INVALID) {
                    cb(null, false);
                }
                else {
                    cb(err, data2);
                }
            });
        }
        else {
            let res = false;
            try {
                res = this.lib.C_Verify(this.session.handle, bytes, signature);
            }
            catch (err) {
                if (!(err instanceof pkcs11.Pkcs11Error && err.code === pkcs11.CKR_SIGNATURE_INVALID)) {
                    throw err;
                }
            }
            return res;
        }
    }
    init(alg, key) {
        const pMech = Mechanism.create(alg);
        this.lib.C_VerifyInit(this.session.handle, pMech, key.handle);
    }
}
