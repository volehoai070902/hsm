import { __decorate } from "tslib";
import { attribute } from "../../core";
import { Key } from "./key";
export class SecretKey extends Key {
    get wrapTemplate() {
        throw new Error("Not implemented");
    }
    set wrapTemplate(v) {
        throw new Error("Not implemented");
    }
    get unwrapTemplate() {
        throw new Error("Not implemented");
    }
    set unwrapTemplate(v) {
        throw new Error("Not implemented");
    }
}
__decorate([
    attribute("sensitive")
], SecretKey.prototype, "sensitive", void 0);
__decorate([
    attribute("encrypt", false)
], SecretKey.prototype, "encrypt", void 0);
__decorate([
    attribute("decrypt", false)
], SecretKey.prototype, "decrypt", void 0);
__decorate([
    attribute("verify", false)
], SecretKey.prototype, "verify", void 0);
__decorate([
    attribute("sign")
], SecretKey.prototype, "sign", void 0);
__decorate([
    attribute("wrap", false)
], SecretKey.prototype, "wrap", void 0);
__decorate([
    attribute("unwrap", false)
], SecretKey.prototype, "unwrap", void 0);
__decorate([
    attribute("extractable")
], SecretKey.prototype, "extractable", void 0);
__decorate([
    attribute("alwaysSensitive")
], SecretKey.prototype, "alwaysSensitive", void 0);
__decorate([
    attribute("neverExtractable")
], SecretKey.prototype, "neverExtractable", void 0);
__decorate([
    attribute("checkValue")
], SecretKey.prototype, "checkValue", void 0);
__decorate([
    attribute("wrapWithTrusted")
], SecretKey.prototype, "wrapTrusted", void 0);
__decorate([
    attribute("trusted")
], SecretKey.prototype, "trusted", void 0);
