import { __decorate } from "tslib";
import { attribute } from "../../core";
import { Key } from "./key";
export class PrivateKey extends Key {
    get template() {
        throw new Error("Not implemented");
    }
    set template(v) {
        throw new Error("Not implemented");
    }
}
__decorate([
    attribute("subject")
], PrivateKey.prototype, "subject", void 0);
__decorate([
    attribute("sensitive")
], PrivateKey.prototype, "sensitive", void 0);
__decorate([
    attribute("decrypt", false)
], PrivateKey.prototype, "decrypt", void 0);
__decorate([
    attribute("sign", false)
], PrivateKey.prototype, "sign", void 0);
__decorate([
    attribute("signRecover", false)
], PrivateKey.prototype, "signRecover", void 0);
__decorate([
    attribute("unwrap", false)
], PrivateKey.prototype, "unwrap", void 0);
__decorate([
    attribute("extractable", false)
], PrivateKey.prototype, "extractable", void 0);
__decorate([
    attribute("alwaysSensitive", false)
], PrivateKey.prototype, "alwaysSensitive", void 0);
__decorate([
    attribute("neverExtractable", false)
], PrivateKey.prototype, "neverExtractable", void 0);
__decorate([
    attribute("wrapWithTrusted", false)
], PrivateKey.prototype, "wrapTrusted", void 0);
__decorate([
    attribute("alwaysAuth", false)
], PrivateKey.prototype, "alwaysAuthenticate", void 0);
