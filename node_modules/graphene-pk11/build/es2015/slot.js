import * as core from "./core";
import { SessionFlag, Session, Token, MechanismCollection } from "./";
import { removePadding } from "./core";
export var SlotFlag;
(function (SlotFlag) {
    SlotFlag[SlotFlag["TOKEN_PRESENT"] = 1] = "TOKEN_PRESENT";
    SlotFlag[SlotFlag["REMOVABLE_DEVICE"] = 2] = "REMOVABLE_DEVICE";
    SlotFlag[SlotFlag["HW_SLOT"] = 4] = "HW_SLOT";
})(SlotFlag || (SlotFlag = {}));
export class Slot extends core.HandleObject {
    constructor(handle, module, lib) {
        super(handle, lib);
        this.module = module;
        this.getInfo();
    }
    getToken() {
        return new Token(this.handle, this.lib);
    }
    getMechanisms() {
        const arr = this.lib.C_GetMechanismList(this.handle);
        return new MechanismCollection(arr, this.handle, this.lib);
    }
    initToken(pin, label = "") {
        const res = this.lib.C_InitToken(this.handle, pin, label);
        return removePadding(res);
    }
    open(flags = SessionFlag.SERIAL_SESSION) {
        const hSession = this.lib.C_OpenSession(this.handle, flags);
        return new Session(hSession, this, this.lib);
    }
    closeAll() {
        this.lib.C_CloseAllSessions(this.handle);
    }
    getInfo() {
        const info = this.lib.C_GetSlotInfo(this.handle);
        this.slotDescription = core.removePadding(info.slotDescription);
        this.manufacturerID = core.removePadding(info.manufacturerID);
        this.flags = info.flags;
        this.hardwareVersion = info.hardwareVersion;
        this.firmwareVersion = info.firmwareVersion;
    }
}
export class SlotCollection extends core.Collection {
    constructor(items, module, lib) {
        super(items, lib, Slot);
        this.module = module;
    }
    items(index) {
        return new Slot(this.innerItems[index], this.module, this.lib);
    }
}
