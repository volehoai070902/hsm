"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const object_1 = require("../object");
const data_1 = require("./data");
const domain_1 = require("./domain");
const keys_1 = require("./keys");
const certs_1 = require("./certs");
object_1.SessionObjectFactory.register(object_1.ObjectClass.DATA, data_1.Data);
object_1.SessionObjectFactory.register(object_1.ObjectClass.DOMAIN_PARAMETERS, domain_1.DomainParameters);
object_1.SessionObjectFactory.register(object_1.ObjectClass.PRIVATE_KEY, keys_1.PrivateKey);
object_1.SessionObjectFactory.register(object_1.ObjectClass.PUBLIC_KEY, keys_1.PublicKey);
object_1.SessionObjectFactory.register(object_1.ObjectClass.SECRET_KEY, keys_1.SecretKey);
object_1.SessionObjectFactory.register(object_1.ObjectClass.CERTIFICATE, certs_1.Certificate, (cert) => {
    const type = cert.type;
    switch (type) {
        case certs_1.CertificateType.X_509:
            return new certs_1.X509Certificate(cert);
        case certs_1.CertificateType.WTLS:
            return new certs_1.WtlsCertificate(cert);
        case certs_1.CertificateType.X_509_ATTR_CERT:
            return new certs_1.AttributeCertificate(cert);
        default:
            throw new Error(`Unknown certificate (CKC_?) type '${type}'`);
    }
});
object_1.SessionObjectFactory.register(object_1.ObjectClass.HW_FEATURE, object_1.SessionObject);
object_1.SessionObjectFactory.register(object_1.ObjectClass.OTP_KEY, object_1.SessionObject);
tslib_1.__exportStar(require("./storage"), exports);
tslib_1.__exportStar(require("./data"), exports);
tslib_1.__exportStar(require("./certs"), exports);
tslib_1.__exportStar(require("./keys"), exports);
tslib_1.__exportStar(require("./domain"), exports);
