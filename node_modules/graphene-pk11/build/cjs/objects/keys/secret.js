"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretKey = void 0;
const tslib_1 = require("tslib");
const core_1 = require("../../core");
const key_1 = require("./key");
class SecretKey extends key_1.Key {
    get wrapTemplate() {
        throw new Error("Not implemented");
    }
    set wrapTemplate(v) {
        throw new Error("Not implemented");
    }
    get unwrapTemplate() {
        throw new Error("Not implemented");
    }
    set unwrapTemplate(v) {
        throw new Error("Not implemented");
    }
}
tslib_1.__decorate([
    (0, core_1.attribute)("sensitive")
], SecretKey.prototype, "sensitive", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("encrypt", false)
], SecretKey.prototype, "encrypt", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("decrypt", false)
], SecretKey.prototype, "decrypt", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("verify", false)
], SecretKey.prototype, "verify", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("sign")
], SecretKey.prototype, "sign", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("wrap", false)
], SecretKey.prototype, "wrap", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("unwrap", false)
], SecretKey.prototype, "unwrap", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("extractable")
], SecretKey.prototype, "extractable", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("alwaysSensitive")
], SecretKey.prototype, "alwaysSensitive", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("neverExtractable")
], SecretKey.prototype, "neverExtractable", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("checkValue")
], SecretKey.prototype, "checkValue", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("wrapWithTrusted")
], SecretKey.prototype, "wrapTrusted", void 0);
tslib_1.__decorate([
    (0, core_1.attribute)("trusted")
], SecretKey.prototype, "trusted", void 0);
exports.SecretKey = SecretKey;
